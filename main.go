// A script to help prepare proceedings with page numbers. It is a hack!
//
// Copyright Hein Meling, 2015.
//
// Feel free to use, share, and revise it as you see fit.
//
// Prerequisit:
// One or more folders containing the papers named according to ACM guidelines,
// e.g. p10-meling.pdf
// The ordering of the PDFs will be defined by the page number.
//
// This script is just a quick hack to do three things:
//
// 1. Create a latex file 'proceedings.tex' based on the pdf files in
//    the folders. This is obtained by running:
//      go run main.go -latex > proceedings.tex
//
//    The script does not compile the latex file to generate proceedings.pdf
//
// 2. Once you have compiled the 'proceedings.pdf' you can run:
//      go run main.go -split > split.sh
//
//    This will create a script that will split the 'proceedings.pdf' file into
//    single page PDFs. You need to run 'split.sh' to do this.
//
// 3. You can now run:
//      go run main.go -unite > unite.sh
//
//    This will create another script that will unite the single page PDFs into
//    one PDF per paper again, named according to ACM guidelines.
//
// Dependencies:
// - This script is written in Go, so you need to install Go.
// - The scripts generated by this script requires some PDF tools that are
//   available in the poppler package (see below for link.)
//
// If you are on a Mac, and have homebrew installed, you can use these packages:
//
// % brew info go
// go: stable 1.4.1 (bottled), HEAD
// https://golang.org
//
// % brew info poppler
// poppler: stable 0.29.0 (bottled)
// http://poppler.freedesktop.org

package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
)

const (
	latex_prefix = `\documentclass{article}
\usepackage[final]{pdfpages}
\usepackage{fancyhdr}
\usepackage{times}

\setlength{\footskip}{85.732bp}

\pagestyle{fancy}
\cfoot{\thepage}
\renewcommand {\headrulewidth}{0pt}
\renewcommand {\footrulewidth}{0pt}

\ifdefined\startpagenum
\setcounter{page}{\startpagenum}
\fi

\begin{document}
\includepdfset{pagecommand=\thispagestyle{fancy}}`
	latex_postfix = `\end{document}`
)

var (
	last *int
	pdfs = make(map[int]string)
)

func main() {
	root := flag.String("dir", ".", "Directory containing folders of papers")
	last = flag.Int("last", 371, "Page number of last page of proceedings")
	latex := flag.Bool("latex", false, "Generate latex file 'proceedings.tex'")
	split := flag.Bool("split", false, "Split the 'proceedings.pdf' file into separate pages")
	unite := flag.Bool("unite", false, "Unite single page PDF files to one PDF for each paper")
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s [OPTIONS]\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "\nOptions:\n")
		flag.PrintDefaults()
	}
	flag.Parse()

	err := filepath.Walk(*root, visit)
	if err != nil {
		fmt.Printf("Directory walker returned %v\n", err)
	}
	var keys []int
	for k := range pdfs {
		keys = append(keys, k)
	}
	sort.Ints(keys)
	if *latex && !*split && !*unite {
		makeLatex(keys)
	} else if !*latex && *split && !*unite {
		makeSeparateCmds(keys)
	} else if !*latex && !*split && *unite {
		makeUniteCmds(keys)
	}
}

func visit(path string, f os.FileInfo, err error) error {
	if f.Name() == "proceedings.pdf" {
		return nil
	}
	if strings.HasSuffix(path, ".pdf") {
		s := strings.Split(strings.TrimPrefix(f.Name(), "p"), "-")
		page, err := strconv.Atoi(s[0])
		if err != nil {
			return err
		}
		parent := strings.Split(path, "/")
		lpath := fmt.Sprintf("%s/%s", parent[len(parent)-2], f.Name())
		pdfs[page] = lpath
	}
	return nil
}

func makeLatex(keys []int) {
	fmt.Println(latex_prefix)
	for _, k := range keys {
		fmt.Printf("\\includepdf[fitpaper=true,pages=-]{%s}\n", pdfs[k])
	}
	fmt.Println(latex_postfix)
}

func makeSeparateCmds(keys []int) {
	for i, k := range keys {
		lastPage := *last
		if i < len(keys)-1 {
			lastPage = keys[i+1] - 1
		}
		fmt.Printf("pdfseparate -f %d -l %d proceedings.pdf %%d.pdf\n", k, lastPage)
	}
}

func makeUniteCmds(keys []int) {
	for i, k := range keys {
		lastPage := *last
		if i < len(keys)-1 {
			lastPage = keys[i+1] - 1
		}
		file := strings.Split(strings.ToLower(pdfs[k]), "/")
		unite := []string{}
		unite = append(unite, "pdfunite")
		for j := k; j <= lastPage; j++ {
			x := fmt.Sprintf("%d.pdf", j)
			unite = append(unite, x)
		}
		unite = append(unite, file[1])
		fmt.Println(strings.Join(unite, " "))
	}
}
